name: Quartz64 Image Build
run-name: Quartz64 image build (${{ github.event_name }})

on:
  workflow_dispatch:
    inputs:
      build-kernel:
        description: Build kernel package
        required: true
        default: true
        type: boolean
      build-u-boot:
        description: Build u-boot package
        required: true
        default: true
        type: boolean
      kernel-ref:
        description: Kernel source ref
        required: true
        type: string
        default: "sbci-quartz64"
      u-boot-ref:
        description: u-boot source ref
        required: true
        type: string
        default: "sbci-quartz64"

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-k@${{ inputs.kernel-ref }}-b@${{ inputs.u-boot-ref }}
  cancel-in-progress: true

env:
  board-soc: rk356x
  kernel-config: rk356x.config
  u-boot-config: rk3566-quartz64.config
  build-image: ${{ inputs.build-kernel && inputs.build-u-boot }}

jobs:
  upload-config:
    name: Prepare board configs
    runs-on: ubuntu-22.04
    steps:
      - name: Clone workflow repo
        uses: actions/checkout@v3

      - name: Copy kernel config
        run: |
          cp -L ./configs/kernel/${{ env.kernel-config }} ./kernel.config

      - name: Upload kernel config
        uses: actions/upload-artifact@v3
        with:
          name: kernel-config
          path: kernel.config
          retention-days: 7
          if-no-files-found: error

      - name: Upload u-boot configs
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-configs
          path: configs/u-boot/${{ env.board-soc }}/*
          retention-days: 7
          if-no-files-found: error

  build-kernel:
    name: Build kernel
    if: inputs.build-kernel
    needs: upload-config
    uses: ./.github/workflows/kernel-aarch64.yaml
    with:
      source-repo: neggles/linux-quartz64
      source-ref: ${{ inputs.kernel-ref }}

  build-u-boot:
    name: Build u-boot
    if: inputs.build-u-boot
    needs: upload-config
    uses: ./.github/workflows/u-boot-rockchip.yaml
    strategy:
      fail-fast: false
      matrix:
        board:
          [
            { name: "soquartz-blade", config: "rk3566-quartz64", envfile: "", make-target: "" },
            { name: "soquartz-cm4", config: "rk3566-quartz64", envfile: "", make-target: "" },
          ]
    with:
      source-repo: neggles/u-boot-quartz64
      source-ref: ${{ inputs.u-boot-ref }}
      board: ${{ matrix.board.name }}
      config: ${{ matrix.board.config }}
      envfile: ${{ matrix.board.envfile }}
      make-target: ${{ matrix.board.make-target }}

  image-matrix:
    name: Generate image matrix
    runs-on: ubuntu-latest
    needs: [build-u-boot]
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Download u-boot artifacts
        uses: actions/download-artifact@v3
        with:
          name: image-matrix
          path: matrix
      - name: 'Echo download path'
        run: echo ${{steps.download.outputs.download-path}}
      - name: Merge matrixes
        id: matrix
        working-directory: matrix
        run: |
          matrix=$(jq -c -s . ./*.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "$matrix"

  build-image-dump:
    name: Dump contexts
    runs-on: ubuntu-latest
    needs: [image-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.image-matrix.outputs.matrix) }}
    steps:
      - name: Dump env context
        run: echo '${{ toJSON(env) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Dump needs context
        run: echo '${{ toJSON(needs) }}'

  build-image-dump-reusable:
    name: Dump contexts from reusable
    needs: [build-kernel, image-matrix]
    uses: ./.github/workflows/dump-context.yaml
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.image-matrix.outputs.matrix) }}
    with:
      board: ${{ matrix.board }}
      kernel: ${{ needs.build-kernel.outputs.artifact }}
      firmware: u-boot-${{ matrix.board }}

  # build_image:
  #   if: inputs.build-u-boot && inputs.build-kernel
  #   needs: [build-u-boot, build-kernel]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       boards: [
  #           { name: "SOQuartz Blade",  }
  #         ]
